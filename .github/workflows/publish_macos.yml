name: "publish_macos"

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            arch: 'silicon'
          # - platform: 'macos-latest' # Universal builds
          #   args: '--target universal-apple-darwin'
          # - platform: 'macos-latest' # for Intel based macs.
          #   args: '--target x86_64-apple-darwin'
          #   arch: 'intel'
          # - platform: 'ubuntu-22.04'
          #   args: ''
          # - platform: 'windows-latest'
          #   args: ''

    runs-on: ${{ matrix.platform }}
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
    steps:
      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - uses: actions/checkout@v4

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache bun
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "src-python/.python-version"

      - name: Install the project
        run: |
          cd src-python
          uv venv
          source .venv/bin/activate
          uv sync
          uv pip install --system hatch

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Frontend Dependencies
        run: bun install

      - uses: tauri-apps/tauri-action@v0
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'Montelimar App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
    outputs:
      app_version: ${{ steps.build.outputs.appVersion }}

  publish-to-cask:
    needs: build-tauri
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tap repo
        uses: actions/checkout@v4
        with:
          repository: julien-blanchon/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: tap-repo

      - name: Download Release Asset
        run: |
          mkdir dist
          gh release download "app-v${{ needs.build-tauri.outputs.app_version }}" \
            --repo julien-blanchon/Montelimar \
            --pattern "*aarch64.app.tar.gz" \
            --dir dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute SHA256
        id: shasum
        run: |
          FILE_PATH=$(find dist -name "*.tar.gz")
          SHA=$(shasum -a 256 "$FILE_PATH" | awk '{print $1}')
          echo "sha256=$SHA" >> $GITHUB_OUTPUT
          echo "file_name=$(basename "$FILE_PATH")" >> $GITHUB_OUTPUT

      - name: Update Cask
        run: |
          VERSION="${{ needs.build-tauri.outputs.app_version }}"
          DOWNLOAD_URL="https://github.com/julien-blanchon/Montelimar/releases/download/app-v${VERSION}/${{ steps.shasum.outputs.file_name }}"
          CASK_PATH="tap-repo/Casks/montelimar.rb"

          echo "Generating cask for version $VERSION..."
          echo "Download URL: $DOWNLOAD_URL"

          echo "cask \"montelimar\" do" > "$CASK_PATH"
          echo "  version \"$VERSION\"" >> "$CASK_PATH"
          echo "  sha256 \"${{ steps.shasum.outputs.sha256 }}\"" >> "$CASK_PATH"
          echo "" >> "$CASK_PATH"
          echo "  url \"$DOWNLOAD_URL\"," >> "$CASK_PATH"
          echo "      verified: \"github.com/julien-blanchon/Montelimar/\"" >> "$CASK_PATH"
          echo "" >> "$CASK_PATH"
          echo "  name \"Montelimar\"" >> "$CASK_PATH"
          echo "  desc \"AI-powered desktop app built with Tauri\"" >> "$CASK_PATH"
          echo "  homepage \"https://github.com/julien-blanchon/Montelimar\"" >> "$CASK_PATH"
          echo "" >> "$CASK_PATH"
          echo "  app \"Montelimar.app\"" >> "$CASK_PATH"
          echo "end" >> "$CASK_PATH"

          cd tap-repo
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Casks/montelimar.rb
          git commit -m "Update Montelimar cask to v$VERSION"
          git push origin main
